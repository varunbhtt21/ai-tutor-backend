"""Initial migration

Revision ID: e08e15d3acf9
Revises: 
Create Date: 2025-06-18 18:25:58.607988

"""
from alembic import op
import sqlalchemy as sa
import sqlmodel


# revision identifiers, used by Alembic.
revision = 'e08e15d3acf9'
down_revision = None
branch_labels = None
depends_on = None


def upgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('user',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('username', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=False),
    sa.Column('email', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('hashed_password', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('role', sa.Enum('ADMIN', 'INSTRUCTOR', 'STUDENT', name='userrole'), nullable=False),
    sa.Column('first_name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('last_name', sqlmodel.sql.sqltypes.AutoString(length=50), nullable=True),
    sa.Column('avatar_url', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_verified', sa.Boolean(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('last_login', sa.DateTime(), nullable=True),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_user_email'), 'user', ['email'], unique=True)
    op.create_index(op.f('ix_user_username'), 'user', ['username'], unique=True)
    op.create_table('course',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('subject', sqlmodel.sql.sqltypes.AutoString(length=100), nullable=True),
    sa.Column('difficulty_level', sqlmodel.sql.sqltypes.AutoString(length=20), nullable=True),
    sa.Column('estimated_duration', sa.Integer(), nullable=True),
    sa.Column('is_active', sa.Boolean(), nullable=False),
    sa.Column('is_public', sa.Boolean(), nullable=False),
    sa.Column('requires_approval', sa.Boolean(), nullable=False),
    sa.Column('tags', sa.JSON(), nullable=True),
    sa.Column('learning_objectives', sa.JSON(), nullable=True),
    sa.Column('prerequisites', sa.JSON(), nullable=True),
    sa.Column('instructor_id', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['instructor_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('session',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('name', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=1000), nullable=True),
    sa.Column('course_id', sa.Integer(), nullable=False),
    sa.Column('status', sa.Enum('DRAFT', 'PUBLISHED', 'ARCHIVED', name='sessionstatus'), nullable=False),
    sa.Column('graph_json', sa.JSON(), nullable=True),
    sa.Column('max_attempts_per_bubble', sa.Integer(), nullable=False),
    sa.Column('coins_per_bubble', sa.Integer(), nullable=False),
    sa.Column('time_limit_minutes', sa.Integer(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.Column('published_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['course_id'], ['course.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('bubblenode',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('node_id', sqlmodel.sql.sqltypes.AutoString(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('type', sa.Enum('CONCEPT', 'TASK', 'QUIZ', 'DEMO', 'SUMMARY', name='bubbletype'), nullable=False),
    sa.Column('title', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('content_md', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('code_template', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('test_cases', sa.JSON(), nullable=True),
    sa.Column('expected_output', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('hints', sa.JSON(), nullable=True),
    sa.Column('tutor_prompt', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('success_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('failure_message', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('coin_reward', sa.Integer(), nullable=False),
    sa.Column('bonus_conditions', sa.JSON(), nullable=True),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.Column('updated_at', sa.DateTime(), nullable=True),
    sa.ForeignKeyConstraint(['session_id'], ['session.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_bubblenode_node_id'), 'bubblenode', ['node_id'], unique=False)
    op.create_table('cointransaction',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('transaction_type', sa.Enum('EARNED', 'BONUS', 'SPENT', 'REFUNDED', name='transactiontype'), nullable=False),
    sa.Column('amount', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('node_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('description', sqlmodel.sql.sqltypes.AutoString(length=200), nullable=False),
    sa.Column('transaction_metadata', sa.JSON(), nullable=True),
    sa.Column('balance_before', sa.Integer(), nullable=False),
    sa.Column('balance_after', sa.Integer(), nullable=False),
    sa.Column('created_at', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['session.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('eventlog',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('event_type', sa.Enum('SESSION_START', 'SESSION_COMPLETE', 'BUBBLE_ENTER', 'BUBBLE_SUCCESS', 'BUBBLE_FAIL', 'HINT_REQUESTED', 'CODE_EXECUTED', 'TUTOR_INTERACTION', name='eventtype'), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=True),
    sa.Column('node_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('payload', sa.JSON(), nullable=True),
    sa.Column('response_time_ms', sa.Integer(), nullable=True),
    sa.Column('success', sa.Boolean(), nullable=True),
    sa.Column('score', sa.Float(), nullable=True),
    sa.Column('user_agent', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('ip_address', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('timestamp', sa.DateTime(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['session.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_table('studentstate',
    sa.Column('id', sa.Integer(), nullable=False),
    sa.Column('student_id', sa.Integer(), nullable=False),
    sa.Column('session_id', sa.Integer(), nullable=False),
    sa.Column('current_node_id', sqlmodel.sql.sqltypes.AutoString(), nullable=True),
    sa.Column('completed_nodes', sa.JSON(), nullable=True),
    sa.Column('failed_attempts', sa.JSON(), nullable=True),
    sa.Column('total_coins', sa.Integer(), nullable=False),
    sa.Column('is_completed', sa.Boolean(), nullable=False),
    sa.Column('completion_percentage', sa.Float(), nullable=False),
    sa.Column('started_at', sa.DateTime(), nullable=False),
    sa.Column('last_activity_at', sa.DateTime(), nullable=False),
    sa.Column('completed_at', sa.DateTime(), nullable=True),
    sa.Column('total_time_spent', sa.Integer(), nullable=False),
    sa.ForeignKeyConstraint(['session_id'], ['session.id'], ),
    sa.ForeignKeyConstraint(['student_id'], ['user.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    # ### end Alembic commands ###


def downgrade() -> None:
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_table('studentstate')
    op.drop_table('eventlog')
    op.drop_table('cointransaction')
    op.drop_index(op.f('ix_bubblenode_node_id'), table_name='bubblenode')
    op.drop_table('bubblenode')
    op.drop_table('session')
    op.drop_table('course')
    op.drop_index(op.f('ix_user_username'), table_name='user')
    op.drop_index(op.f('ix_user_email'), table_name='user')
    op.drop_table('user')
    # ### end Alembic commands ### 